{"version":3,"file":"index.umd.js","sources":["../src/index.ts"],"sourcesContent":["import got from 'got';\nimport buildUrl, { IQueryParams } from 'build-url-ts';\nimport { createHmac } from 'crypto';\nimport { matches } from 'ip-matching';\n\nexport interface PageView {\n  ipAddress: string;\n  userAgent: string;\n  requestedUrl: string;\n  visitorId?: string;\n  referringUrl?: string;\n  visitorSegments?: string[];\n}\n\nexport class Client {\n  private readonly workspaceId: string;\n  private readonly apiHost: string;\n  private ipBlacklistPatterns: string[] = [];\n  private whitelistedUrlParameters: string[] = [\n    'utm_medium',\n    'utm_source',\n    'utm_campaign',\n    'utm_content',\n    'utm_term',\n  ];\n  constructor(private apiKey: string, private readonly salt: string) {\n    this.workspaceId = this.getWorkspaceId();\n    this.apiHost = `https://${this.workspaceId}.s3y.io`;\n  }\n\n  private hash(value: string): string {\n    const hmac = createHmac('sha256', this.salt);\n    return hmac.update(Buffer.from(value, 'utf-8')).digest('hex');\n  }\n\n  private getVisitorId(pageView: PageView): string {\n    const { visitorId, ipAddress, userAgent } = pageView;\n    if (visitorId) {\n      return this.hash([visitorId, this.workspaceId].join('|'));\n    }\n\n    return this.hash([ipAddress, userAgent, this.workspaceId].join('|'));\n  }\n\n  private getWorkspaceId(): string {\n    const parts = Buffer.from(this.apiKey, 'base64')\n      .toString('ascii')\n      .split('|');\n    if (parts.length > 0) {\n      new Error('failed to extract workspaceId from apiKey');\n    }\n    return parts[0] as string;\n  }\n\n  private getRequestedUrl(requestedUrl: string): string {\n    const url = new URL(requestedUrl);\n    const { searchParams } = url;\n\n    searchParams.forEach((_value, param) => {\n      if (!this.whitelistedUrlParameters.includes(param)) {\n        url.searchParams.delete(param);\n      }\n    });\n\n    return url.toString();\n  }\n\n  private getReferringUrl(referringUrl: string): string {\n    const url = new URL(referringUrl);\n    return `${url.protocol}//${url.host}`;\n  }\n\n  public addWhitelistedUrlParameter(param: string): void {\n    this.whitelistedUrlParameters.push(param);\n  }\n\n  public async logPageView(pageView: PageView): Promise<boolean> {\n    const {\n      userAgent,\n      requestedUrl,\n      referringUrl,\n      ipAddress,\n      visitorSegments,\n    } = pageView;\n\n    if (this.isBlockedIp(ipAddress)) {\n      return false;\n    }\n\n    const queryParams: IQueryParams = {\n      vid: this.getVisitorId(pageView),\n      ua: userAgent,\n      url: this.getRequestedUrl(requestedUrl),\n    };\n\n    if (referringUrl) {\n      queryParams['ref'] = this.getReferringUrl(referringUrl);\n    }\n\n    if (visitorSegments) {\n      queryParams['sg'] = visitorSegments.join(',');\n    }\n\n    const url = buildUrl(this.apiHost, {\n      path: '/count',\n      queryParams,\n    });\n\n    const options = {\n      timeout: {\n        send: 5000,\n      },\n      headers: {\n        Authorization: `Bearer ${this.apiKey}`,\n      },\n    };\n\n    const { statusCode } = await got(url, options).catch((error) => {\n      throw new Error('failed to log page view' + error.message);\n    });\n    if (statusCode === 204) {\n      return true;\n    }\n    throw new Error('failed to log page view. Status code: ' + statusCode);\n  }\n\n  private isBlockedIp(ipAddress: string): boolean {\n    for (const pattern of this.ipBlacklistPatterns) {\n      if (matches(ipAddress, pattern)) return true;\n    }\n    return false;\n  }\n\n  public blacklistIpRange(pattern: string) {\n    this.ipBlacklistPatterns.push(pattern);\n  }\n}\n"],"names":["createHmac","buildUrl","got","matches"],"mappings":"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"}
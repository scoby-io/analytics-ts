{"version":3,"file":"index.esm.js","sources":["../src/index.ts"],"sourcesContent":["import got from 'got';\nimport buildUrl, { IQueryParams } from 'build-url-ts';\nimport { createHmac } from 'crypto';\nimport { matches } from 'ip-matching';\n\nexport interface PageView {\n  ipAddress: string;\n  userAgent: string;\n  requestedUrl: string;\n  visitorId?: string;\n  referringUrl?: string;\n  visitorSegments?: string[];\n}\n\nexport class Client {\n  private readonly workspaceId: string;\n  private readonly apiHost: string;\n  private ipBlacklistPatterns: string[] = [];\n  private whitelistedUrlParameters: string[] = [\n    'utm_medium',\n    'utm_source',\n    'utm_campaign',\n    'utm_content',\n    'utm_term',\n  ];\n  constructor(private apiKey: string, private readonly salt: string) {\n    this.workspaceId = this.getWorkspaceId();\n    this.apiHost = `https://${this.workspaceId}.s3y.io`;\n  }\n\n  private hash(value: string): string {\n    const hmac = createHmac('sha256', this.salt);\n    return hmac.update(Buffer.from(value, 'utf-8')).digest('hex');\n  }\n\n  private getVisitorId(pageView: PageView): string {\n    const { visitorId, ipAddress, userAgent } = pageView;\n    if (visitorId) {\n      return this.hash([visitorId, this.workspaceId].join('|'));\n    }\n\n    return this.hash([ipAddress, userAgent, this.workspaceId].join('|'));\n  }\n\n  private getWorkspaceId(): string {\n    const parts = Buffer.from(this.apiKey, 'base64')\n      .toString('ascii')\n      .split('|');\n    if (parts.length > 0) {\n      new Error('failed to extract workspaceId from apiKey');\n    }\n    return parts[0] as string;\n  }\n\n  private getRequestedUrl(requestedUrl: string): string {\n    const url = new URL(requestedUrl);\n    const { searchParams } = url;\n\n    searchParams.forEach((_value, param) => {\n      if (!this.whitelistedUrlParameters.includes(param)) {\n        url.searchParams.delete(param);\n      }\n    });\n\n    return url.toString();\n  }\n\n  private getReferringUrl(referringUrl: string): string {\n    const url = new URL(referringUrl);\n    return `${url.protocol}//${url.host}`;\n  }\n\n  public addWhitelistedUrlParameter(param: string): void {\n    this.whitelistedUrlParameters.push(param);\n  }\n\n  public async logPageView(pageView: PageView): Promise<boolean> {\n    const {\n      userAgent,\n      requestedUrl,\n      referringUrl,\n      ipAddress,\n      visitorSegments,\n    } = pageView;\n\n    if (this.isBlockedIp(ipAddress)) {\n      return false;\n    }\n\n    const queryParams: IQueryParams = {\n      vid: this.getVisitorId(pageView),\n      ua: userAgent,\n      url: this.getRequestedUrl(requestedUrl),\n    };\n\n    if (referringUrl) {\n      queryParams['ref'] = this.getReferringUrl(referringUrl);\n    }\n\n    if (visitorSegments) {\n      queryParams['sg'] = visitorSegments.join(',');\n    }\n\n    const url = buildUrl(this.apiHost, {\n      path: '/count',\n      queryParams,\n    });\n\n    const options = {\n      timeout: {\n        send: 5000,\n      },\n      headers: {\n        Authorization: `Bearer ${this.apiKey}`,\n      },\n    };\n\n    const { statusCode } = await got(url, options).catch((error) => {\n      throw new Error('failed to log page view' + error.message);\n    });\n    if (statusCode === 204) {\n      return true;\n    }\n    throw new Error('failed to log page view. Status code: ' + statusCode);\n  }\n\n  private isBlockedIp(ipAddress: string): boolean {\n    for (const pattern of this.ipBlacklistPatterns) {\n      if (matches(ipAddress, pattern)) return true;\n    }\n    return false;\n  }\n\n  public blacklistIpRange(pattern: string) {\n    this.ipBlacklistPatterns.push(pattern);\n  }\n}\n"],"names":[],"mappings":"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"}
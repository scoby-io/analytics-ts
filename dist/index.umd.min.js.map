{"version":3,"file":"index.umd.min.js","sources":["../src/index.ts"],"sourcesContent":["import got from 'got';\nimport buildUrl, { IQueryParams } from 'build-url-ts';\nimport { createHmac } from 'crypto';\n\nexport interface PageView {\n  ipAddress: string;\n  userAgent: string;\n  requestedUrl: string;\n  visitorId?: string;\n  referringUrl?: string;\n}\n\nexport class Client {\n  private readonly jarId: string;\n  private readonly apiHost: string;\n  constructor(private apiKey: string, private readonly salt: string) {\n    this.jarId = this.getJarId();\n    this.apiHost = `https://${this.jarId}.s3y.io`;\n  }\n\n  private hash(value: string): string {\n    const hmac = createHmac('sha256', this.salt);\n    return hmac.update(Buffer.from(value, 'utf-8')).digest('hex');\n  }\n\n  private getVisitorId(pageView: PageView): string {\n    const { visitorId, ipAddress, userAgent } = pageView;\n    if (visitorId) {\n      return this.hash([visitorId, this.jarId].join('|'));\n    }\n\n    return this.hash([ipAddress, userAgent, this.jarId].join('|'));\n  }\n\n  private getJarId(): string {\n    const buffer = new Buffer(this.apiKey, 'base64');\n    const parts = buffer.toString('ascii').split('|');\n    if (parts.length > 0) {\n      new Error('failed to extract jarId from apiKey');\n    }\n    return parts[0] as string;\n  }\n\n  public async logPageView(pageView: PageView): Promise<boolean> {\n    const { userAgent, requestedUrl, referringUrl } = pageView;\n\n    const queryParams: IQueryParams = {\n      vid: this.getVisitorId(pageView),\n      ua: userAgent,\n      url: requestedUrl,\n    };\n\n    if (referringUrl) {\n      queryParams['ref'] = referringUrl;\n    }\n\n    const url = buildUrl(this.apiHost, {\n      path: '/count',\n      queryParams,\n    });\n\n    const options = {\n      timeout: {\n        send: 5000,\n      },\n      headers: {\n        Authorization: `Bearer ${this.apiKey}`,\n      },\n    };\n\n    const { statusCode } = await got(url, options).catch((error) => {\n      throw new Error('failed to log page view' + error.message);\n    });\n    if (statusCode === 204) {\n      return true;\n    }\n    throw new Error('failed to log page view. Status code: ' + statusCode);\n  }\n}\n"],"names":["Client","apiKey","salt","this","jarId","getJarId","apiHost","concat","prototype","hash","value","createHmac","update","Buffer","from","digest","getVisitorId","pageView","visitorId","ipAddress","userAgent","join","parts","toString","split","length","logPageView","requestedUrl","referringUrl","queryParams","vid","ua","url","buildUrl","path","options","timeout","send","headers","Authorization","got","catch","error","Error","message","statusCode","_a","sent"],"mappings":";;;;;ywDAYA,IAAAA,EAAA,WAGE,SAAoBA,EAAAC,EAAiCC,GAAjCC,KAAMF,OAANA,EAAiCE,KAAID,KAAJA,EACnDC,KAAKC,MAAQD,KAAKE,WAClBF,KAAKG,QAAU,WAAAC,OAAWJ,KAAKC,gBAChC,CA4DH,OA1DUJ,EAAIQ,UAAAC,KAAZ,SAAaC,GAEX,OADaC,EAAUA,WAAC,SAAUR,KAAKD,MAC3BU,OAAOC,OAAOC,KAAKJ,EAAO,UAAUK,OAAO,QAGjDf,EAAYQ,UAAAQ,aAApB,SAAqBC,GACX,IAAAC,EAAoCD,EAAQC,UAAjCC,EAAyBF,EAAQE,UAAtBC,EAAcH,YAC5C,OAAIC,EACKf,KAAKM,KAAK,CAACS,EAAWf,KAAKC,OAAOiB,KAAK,MAGzClB,KAAKM,KAAK,CAACU,EAAWC,EAAWjB,KAAKC,OAAOiB,KAAK,OAGnDrB,EAAAQ,UAAAH,SAAR,WACE,IACMiB,EADS,IAAIT,OAAOV,KAAKF,OAAQ,UAClBsB,SAAS,SAASC,MAAM,KAI7C,OAHIF,EAAMG,OAGHH,EAAM,IAGFtB,EAAWQ,UAAAkB,YAAxB,SAAyBT,+GA2BA,OA1BfG,EAA0CH,EAAjCG,UAAEO,EAA+BV,EAAQU,aAAzBC,EAAiBX,eAE5CY,EAA4B,CAChCC,IAAK3B,KAAKa,aAAaC,GACvBc,GAAIX,EACJY,IAAKL,GAGHC,IACFC,EAAiB,IAAID,GAGjBI,EAAMC,EAAAA,QAAS9B,KAAKG,QAAS,CACjC4B,KAAM,SACNL,YAAWA,IAGPM,EAAU,CACdC,QAAS,CACPC,KAAM,KAERC,QAAS,CACPC,cAAe,UAAAhC,OAAUJ,KAAKF,UAIL,CAAA,EAAAuC,UAAIR,EAAKG,GAASM,OAAM,SAACC,GACpD,MAAM,IAAIC,MAAM,0BAA4BD,EAAME,QACnD,YACD,GAAmB,OAHXC,EAAeC,EAErBC,OAFgBF,YAIhB,MAAA,CAAA,GAAO,GAET,MAAM,IAAIF,MAAM,yCAA2CE,SAC5D,EACF7C,CAAD"}
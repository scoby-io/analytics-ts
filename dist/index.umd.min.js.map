{"version":3,"file":"index.umd.min.js","sources":["../src/index.ts"],"sourcesContent":["import got from 'got';\nimport buildUrl, { IQueryParams } from 'build-url-ts';\nimport { createHmac } from 'crypto';\nimport { matches } from 'ip-matching';\n\nexport interface PageView {\n  ipAddress: string;\n  userAgent: string;\n  requestedUrl: string;\n  visitorId?: string;\n  referringUrl?: string;\n  visitorSegments?: string[];\n}\n\nexport class Client {\n  private readonly workspaceId: string;\n  private readonly apiHost: string;\n  private ipBlacklistPatterns: string[] = [];\n  private whitelistedUrlParameters: string[] = [\n    'utm_medium',\n    'utm_source',\n    'utm_campaign',\n    'utm_content',\n    'utm_term',\n  ];\n  constructor(private apiKey: string, private readonly salt: string) {\n    this.workspaceId = this.getWorkspaceId();\n    this.apiHost = `https://${this.workspaceId}.s3y.io`;\n  }\n\n  private hash(value: string): string {\n    const hmac = createHmac('sha256', this.salt);\n    return hmac.update(Buffer.from(value, 'utf-8')).digest('hex');\n  }\n\n  private getVisitorId(pageView: PageView): string {\n    const { visitorId, ipAddress, userAgent } = pageView;\n    if (visitorId) {\n      return this.hash([visitorId, this.workspaceId].join('|'));\n    }\n\n    return this.hash([ipAddress, userAgent, this.workspaceId].join('|'));\n  }\n\n  private getWorkspaceId(): string {\n    const parts = Buffer.from(this.apiKey, 'base64')\n      .toString('ascii')\n      .split('|');\n    if (parts.length > 0) {\n      new Error('failed to extract workspaceId from apiKey');\n    }\n    return parts[0] as string;\n  }\n\n  private getRequestedUrl(requestedUrl: string): string {\n    const url = new URL(requestedUrl);\n    const { searchParams } = url;\n\n    searchParams.forEach((_value, param) => {\n      if (!this.whitelistedUrlParameters.includes(param)) {\n        url.searchParams.delete(param);\n      }\n    });\n\n    return url.toString();\n  }\n\n  private getReferringUrl(referringUrl: string): string {\n    const url = new URL(referringUrl);\n    return `${url.protocol}//${url.host}`;\n  }\n\n  public addWhitelistedUrlParameter(param: string): void {\n    this.whitelistedUrlParameters.push(param);\n  }\n\n  public async logPageView(pageView: PageView): Promise<boolean> {\n    const {\n      userAgent,\n      requestedUrl,\n      referringUrl,\n      ipAddress,\n      visitorSegments,\n    } = pageView;\n\n    if (this.isBlockedIp(ipAddress)) {\n      return false;\n    }\n\n    const queryParams: IQueryParams = {\n      vid: this.getVisitorId(pageView),\n      ua: userAgent,\n      url: this.getRequestedUrl(requestedUrl),\n    };\n\n    if (referringUrl) {\n      queryParams['ref'] = this.getReferringUrl(referringUrl);\n    }\n\n    if (visitorSegments) {\n      queryParams['sg'] = visitorSegments.join(',');\n    }\n\n    const url = buildUrl(this.apiHost, {\n      path: '/count',\n      queryParams,\n    });\n\n    const options = {\n      timeout: {\n        send: 5000,\n      },\n      headers: {\n        Authorization: `Bearer ${this.apiKey}`,\n      },\n    };\n\n    const { statusCode } = await got(url, options).catch((error) => {\n      throw new Error('failed to log page view' + error.message);\n    });\n    if (statusCode === 204) {\n      return true;\n    }\n    throw new Error('failed to log page view. Status code: ' + statusCode);\n  }\n\n  private isBlockedIp(ipAddress: string): boolean {\n    for (const pattern of this.ipBlacklistPatterns) {\n      if (matches(ipAddress, pattern)) return true;\n    }\n    return false;\n  }\n\n  public blacklistIpRange(pattern: string) {\n    this.ipBlacklistPatterns.push(pattern);\n  }\n}\n"],"names":["Client","apiKey","salt","this","ipBlacklistPatterns","whitelistedUrlParameters","workspaceId","getWorkspaceId","apiHost","concat","prototype","hash","value","createHmac","update","Buffer","from","digest","getVisitorId","pageView","visitorId","ipAddress","userAgent","join","parts","toString","split","length","getRequestedUrl","requestedUrl","_this","url","URL","searchParams","forEach","_value","param","includes","delete","getReferringUrl","referringUrl","protocol","host","addWhitelistedUrlParameter","push","logPageView","visitorSegments","isBlockedIp","queryParams","vid","ua","buildUrl","path","options","timeout","send","headers","Authorization","got","catch","error","Error","message","statusCode","_a","sent","_i","pattern","matches","blacklistIpRange"],"mappings":";;;;;6zDAcA,IAAAA,EAAA,WAWE,SAAoBA,EAAAC,EAAiCC,GAAjCC,KAAMF,OAANA,EAAiCE,KAAID,KAAJA,EAR7CC,KAAmBC,oBAAa,GAChCD,KAAAE,yBAAqC,CAC3C,aACA,aACA,eACA,cACA,YAGAF,KAAKG,YAAcH,KAAKI,iBACxBJ,KAAKK,QAAU,WAAAC,OAAWN,KAAKG,sBAChC,CA4GH,OA1GUN,EAAIU,UAAAC,KAAZ,SAAaC,GAEX,OADaC,EAAUA,WAAC,SAAUV,KAAKD,MAC3BY,OAAOC,OAAOC,KAAKJ,EAAO,UAAUK,OAAO,QAGjDjB,EAAYU,UAAAQ,aAApB,SAAqBC,GACX,IAAAC,EAAoCD,EAAQC,UAAjCC,EAAyBF,EAAQE,UAAtBC,EAAcH,YAC5C,OAAIC,EACKjB,KAAKQ,KAAK,CAACS,EAAWjB,KAAKG,aAAaiB,KAAK,MAG/CpB,KAAKQ,KAAK,CAACU,EAAWC,EAAWnB,KAAKG,aAAaiB,KAAK,OAGzDvB,EAAAU,UAAAH,eAAR,WACE,IAAMiB,EAAQT,OAAOC,KAAKb,KAAKF,OAAQ,UACpCwB,SAAS,SACTC,MAAM,KAIT,OAHIF,EAAMG,OAGHH,EAAM,IAGPxB,EAAeU,UAAAkB,gBAAvB,SAAwBC,GAAxB,IAWCC,EAAA3B,KAVO4B,EAAM,IAAIC,IAAIH,GASpB,OARyBE,EAAGE,aAEfC,SAAQ,SAACC,EAAQC,GACvBN,EAAKzB,yBAAyBgC,SAASD,IAC1CL,EAAIE,aAAaK,OAAOF,EAE5B,IAEOL,EAAIN,YAGLzB,EAAeU,UAAA6B,gBAAvB,SAAwBC,GACtB,IAAMT,EAAM,IAAIC,IAAIQ,GACpB,MAAO,GAAA/B,OAAGsB,EAAIU,sBAAaV,EAAIW,OAG1B1C,EAA0BU,UAAAiC,2BAAjC,SAAkCP,GAChCjC,KAAKE,yBAAyBuC,KAAKR,IAGxBpC,EAAWU,UAAAmC,YAAxB,SAAyB1B,mHASvB,OAPEG,EAKEH,EALOG,UACTO,EAIEV,EAJUU,aACZW,EAGErB,EAHUqB,aACZnB,EAEEF,EAAQE,UADVyB,EACE3B,EAAQ2B,gBAER3C,KAAK4C,YAAY1B,GACnB,CAAA,GAAO,IAGH2B,EAA4B,CAChCC,IAAK9C,KAAKe,aAAaC,GACvB+B,GAAI5B,EACJS,IAAK5B,KAAKyB,gBAAgBC,IAGxBW,IACFQ,EAAiB,IAAI7C,KAAKoC,gBAAgBC,IAGxCM,IACFE,EAAgB,GAAIF,EAAgBvB,KAAK,MAGrCQ,EAAMoB,EAAAA,QAAShD,KAAKK,QAAS,CACjC4C,KAAM,SACNJ,YAAWA,IAGPK,EAAU,CACdC,QAAS,CACPC,KAAM,KAERC,QAAS,CACPC,cAAe,UAAAhD,OAAUN,KAAKF,UAIL,CAAA,EAAAyD,UAAI3B,EAAKsB,GAASM,OAAM,SAACC,GACpD,MAAM,IAAIC,MAAM,0BAA4BD,EAAME,QACnD,aACD,GAAmB,OAHXC,EAAeC,EAErBC,OAFgBF,YAIhB,MAAA,CAAA,GAAO,GAET,MAAM,IAAIF,MAAM,yCAA2CE,SAC5D,EAEO/D,EAAWU,UAAAqC,YAAnB,SAAoB1B,GAClB,IAAsB,IAAA6C,EAAA,EAAAF,EAAA7D,KAAKC,oBAAL8D,EAAAF,EAAArC,OAAAuC,IAA0B,CAA3C,IAAMC,EAAOH,EAAAE,GAChB,GAAIE,EAAOA,QAAC/C,EAAW8C,GAAU,OAAO,CACzC,CACD,OAAO,GAGFnE,EAAgBU,UAAA2D,iBAAvB,SAAwBF,GACtBhE,KAAKC,oBAAoBwC,KAAKuB,IAEjCnE,CAAD"}